                                                        February 8, 2006
                                                 Rev:   April   16, 2010
                                                 Rev:   January 29, 2017
                                                 Rev:   October 03, 2017
                                                 
Master list of known bugs and feature requests

===

                           Tue  October 03, 2017  18:10  

Moving to the top of the list entries planned for 1.1

                           Sat Oct  9 22:42:17 2010
FEATURE
     o Jump to right after the last sub,
       the natural place to add a new one.

  o  A new perlnow command, bound to "o". to run prove
      - "o":        "prove *.t"   (default)
      - "o harder": "prove -r"          
      - "O":        setter for "o" run-string

  o  Any need for new features to do perlbrew integration?

  o  Maybe: work on external perl metadata project: probe given context.
     Look at PPI integration.

  o  if you do a "back" on a buffer without asscode link,
     perlnow should try to establish a reasonable one and use it.

  o  Write tests of override variables:
       perlnow-script-run-string
       perlnow-module-run-string

  o  If a UI change is contemplated again,
     implement a perlnow-setup that takes a UI version number.
     Giving it "1.0" should give you the UI that was shipped with
     perlnow 1.0, no exceptions.  

  o  reconsider the idea that a user's manual input should 
     lock a setting so that automatic features will never 
     overwrite: user-input is sacrosanct, don't blow it away.
     Q: what releases the lock?  A manual reset command?
     The harder prefix?

  o  be rigorous about have "default" and "override" settings.
     there should be one each for everything, for some definition
     of everything.

  o  Is there a need to override PERL5LIB, e.g. to temporarily
     blank it out for some invocations of perlnow-run?

  o  re-read
     /home/doom/End/Cave/Perlnow/Notes/notes-perlnow-2017jan 
     BOOKMARK_2017_OCT

  o  reconsider idea that there should be a perlnow-debug-string that's
     different from perlnow-run-string.  then capital "D" would mean to
     manually set the debug string (and then go into debug?  does R do a
     run or just set?)

     For parallelism, might implement a perlnow-test-string, 
     but that would imply a new perlnow-run-test
     command: this seems redundant.  But what *should* capital T do?

===

  o  Is there a way to support tramp.el?

  Doesn't play nice with tramp.el or ange-ftp, not even a perl check.
  if a remote buffer, make/find a local copy of it and run perl -cw on it?
  (Verify this is still a problem.  --  Apr 15, 2010 )

---

April 9th additons:

  o  Do web searches on emacs and "tags".
     Has someone else gotten around to using PPI?

      o  Resolve static OOP tree, use to find sub def: pntags  (( heard about a C++ solution recently... ))
         Use the same keystroke bindings as the tags system?
         Or some kinda wrappers/hooks to integrate with tags?

  o  Go through this chart, and check off what cases have been tested:
      /home/doom/End/Cave/Perlnow/Notes/summary-perlnow-CASES

  o  Research: Pinto/Carton
     Research: milla add & distzilla
     Review: perlbrew

===
BUG
  module man pages don't regard '::' as part of a word.
  Something like this improves things:
  (modify-syntax-entry ?: "w" man-mode-syntax-table)
  Further: might like to exclude "-" (so that '->' doesn't get sucked in).

===
BUG

Sometimes, an existing buffer local value for a run command gets zapped
when you would rather it didn't:

E.g. if you do a "C-c / t" as a convenient way to get back to a *.t file,
the run-string for the *.t file can get changed on you.

Possibly: if a run-string has been set manually, it should be less
emphemeral than if it's an automatic guess.

Sometimes perlnow's attempts at magically setting the run string correctly
get in the way: When you've set it to something else manually, it should
remember that, and avoid over-writing a manual setting.   An "attribute"
to the string, to tell it hands-off?

===
FEATURE
RUN-STRING
  o  need additional ones, e.g. a 'debug' as well as a 'run' and 'test'?

                                    Sat May 29, 2004  7:43 PM
shift-R:  let's you change the run-string:

implement shift-D to change debug command

maybe: shift-C to change check command

---

I often create run-strings that can't be handed to the
debugger, e.g.

   'cd ~/dev/h2xs-stuff/Hack-To-Excess-Module/; make test'

((Q: is this feature at all needed now?    --  October 19, 2017  
  Automatic setting of default-directory would obviate it.
  Behavior of all that stuff is different now.
))

It would be better if you could *always* switch to running
with "C-c'd" without worrying about changing the run-string
manually.

Approaches:
(1) Avoid prefix commands: "cd blah;"  Instead, set
default-directory before doing the compile.  Possibly,
the run-string should have some "properties" assigned to it,
one of which would be the location that the command expects
to be run.

   (a) setup (and breakdown?) command strings, i.e. hooks?

(2) Make perlnow-perldb smarter.  Have it examine the
run-string and do something a little different if it seems
adviseable, e.g. pick out "cd blah;" and translate it into
a default-directory change, possibly translate "make test"
into something the debugger can use

  (a) alternately: perlnow-perldb looks for a leading "perl"
  invocation, and if it's not there, it ignores the runstring,
  and tries to guess it's own runstring.

(3) add yet another buffer-local run-string, one solely for
debugger use.  (least painful, no? -- Thu Apr 15 13:00:02 2010)

  (a) and plays well with point (a) above.  use general
  run-string if you can, fall back to perldb runstring if
  you have to, and once again: reset and edit commands...


FEATURE

If you rename a file, there should be a way to make
sure that the "associated buffer" is also renamed, in sync.  

Overide the dired rename command with one that special cases my cases...

BUGLET

Create a file in a wrong place (say a *.t)
This sets the run-string.
You move the file (using dired) to where you want it,
emacs realizes that the buffer should point at the
new location... but the run-string stays un-revised.

If it stalled on guessing a run-string until it was actually
run, this little problem would be covered.

  ((Or, if the runstring fails, then the code could then re-guess... ))


===
BUG

If the *compilation* buffer is already displayed in some other frame,
that can cause problems.  Possible fix: always kill *compilation*
before a perlnow-run.  (verify still a problem -- Thu Apr 15 12:46:59 2010)

(( Can you move *compilation* associated it with another frame? )) 

===
===

BUG
Doesn't work with
  xemacs
  windows

Should do some minimal testing on other platforms?
(Or request it from others.)

===
FEATURE
Want to run ispell on pod only.
Alternately: run ispell on pod and comments only.
(How?)

   perlnow-ispell-next-chunk-of-pod

Then interate over all of them with:

   perlnow-ispell-pod

Also useful:

   perlnow-ispell-this-chunk-of-pod

Further thinking: don't ignore the code, but use it to add words
to your dictionary, so that, e.g.  sub variable names aren't
regarded as mispellings in your pod.

===

Beyond etags: better indexing of perl code.  Swish-E?  A distro feature?
Maybe use B:* modules to report on all subs: definitions *and* where called
   B::Xref - Generates cross reference reports for Perl programs
Note: look into glimpse and "glimpse-mode" (Tom Lane likes glimpse).

  (( There are multiple solutions to this kind of thing now.
     Could spend your live investigating them. -- Thu  October 19, 2017  ))

===
FEATURE
C-M-f and C-M-b, when used in the middle of an expression, should skip
you to the beginning or end of that expression (currently, it just
errors).
===
FEATURE
tempo.el, 
allow user edits of standard
subs/methods/constructors/accessors...
===
FEATURE
Better help command:

Currently the "C-c / 1" command just looks up built-ins in "perlfunc".

Could be extended to look up the perldoc for a sub, so that
it works on built-ins *and* extensions.
===
FEATURE (Hm.)
Investigate supporting use of "use diagnostics;", e.g. use a C-u
prefix to "C-c / c" to add a -Mdiagnostics to the run line.

===
How about Mason code?   Any special template.el templates
for that?  Any peculiarities with "multimode"?

===

Write code that goes backwards from
   testfile + policy => code under test
on general principle that it'll be useful someday:

The test file name, and the test policy could be
intepreted backwards to determine what's being tested.

===
                                       Thu Feb 26 11:59:19 2004

When a script run-string ends in a re-direct "> blah.txt",
perlnow should assume that the user will want to see that
file.  It should be opened in a freshly "reverted" buffer
at the bottom of the screen (or something like that...
maybe "tail" it?).

===

Diagramming of perl classes?  Of dependencies?

===

                                      Mon Apr 19 11:29:51 2004
Break out behavior of run-string(s) history into configurable settings:
  o  joint history vs separate history.
  o  buffer-local vs global history.
  o  number of concurrently defined runstring commands.

===

 perlnow-script-using-this-module
 Option to include the SYNOPSIS section, in commented out form

===

Possible feature:

;;; Weird feature idea: when just tabbing away, and you get to
;;; a level boundary, current behavior is to add a separator "/".
;;; Does not switch to "::" until the user has entered one.
;;; Might be better to consult the @INC array, and guess that it's
;;; time to switch to :: once you've entered a module-root.
;;; Sounds cool, but, like: MUCH later.

===

Another thought: generate-test-to-lock-behavior.

I often want to do things backwards: develop a script
that generates some output, then decide that it's working.
Then I want to automatically generate a test script that
will lock the current behavior, so I can continue modifying
the script, and verify that it still does what it did before
when I decided it was working.

If script has a run-string of the form
  perl script input-file > output-file
This is *relatively* easy... Makes copy of the input-file,
saves a copy of the output, uses a simple test to make
sure that in the future the one file is generated by the other.

===

perl-later.el or perl-refactory.el

Maybe: think about the various *actual* workflows that
people *really* use.  Like, you write a script, then
realize you want to move parts of it into a module.
("refactoring")

How about a perlnow-move-this-sub-to-library as an alternate
to cut-and-paste?  A new library *or* an already existing
library.  Make it EXPORT_OK, add in a "use" line that brings
it in.

===

Create hooks.  (*after* and *before*, right?)
perlnow-new-script-hook,
perlnow-new-module-hook,
perlnow-h2xs--hook

===

Can you fix "man" with a wrapper?  Goal is to *never* lose
your original context.  When you follow a link, the content
replaces current man window, web browser style.

(Though when you *first* run it, it's probably better for it
to run in the other-window.  Later invocations from that window
should re-use the window.)

===

Need to cover all the perl file extensions:
  (add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\|t\\|pod\\)\\'" . cperl-mode)) ; .pm .pl .t .pod .al?
Q: what's *.al?
Q: what about *.mas?  Check mmm-mode set-up.

===

FEATURE

Ideally should replace blank lines with empty lines on
either side of a pod tag (^=).

 (( perlpod implies that only old parsers care about this ))

For that matter, opening up empty lines on either side of
pod tags would probably be a good idea.

===
FEATURE

If you create a module from another module, should you get the
same automatic use features that scripts get?  ((Yes))

===

                                         Dec 10, 2009
                                   Rev:  Oct 19, 2017  


Starting from a notes-* file, try to create or edit a test file.

Current behavior (2017, perlnow 1.0): nothing happens,
but you get a warning:  Perlnow: Not a perl buffer.



                                         Thu  October 19, 2017  16:07  

buffer-local
perlnow-associated-project-root

  A way you can connect to a project from outside,
  rather than by looking up from below.

Maybe: when you save a file, if it's a notes-* file, the fact is noted,
and if it's a perl code file, it grabs the last used notes-* file and
associates it with the project-root.

Then you could try to handle the "not a perl buffer" case.

===
FEATURE (for cheat section?)

                                Thu Apr 15 14:17:15 2010

Look at declared variables in a given scope (a sub?)
and report on any that are un-used.  Possibly: mark them
up with comments, which can then be used to remove them.

That could work with something like an "unpack object"
routine that generates a chunk of code like
  my $atttribute = $self->attribute;
  my $widgit     = $self->widgit;
  my $flag       = $self->flag;

unpack all object attributes (alt form: hash fields),
then later clean-up the un-used ones.

===

                                Fri Apr 23 14:06:47 2010
BUG
perlnow-revise-export-list

When trying to publish sub names to an export list ending in
exported hash variables, have seen it add a list of sub names
with '%' marks in front of them (as though they, too, were
hashes).  (?)

===

FEATURE

Sat Jun  5 00:27:09 2010

I think the *right* way to deal with version numbers is that
there should be a project-wide version number, and every file
should have the same version number hard-coded in it.

Might like a command (a function fired by save-hook?) like so:
  perlnow-update-version-numbers

This would look at the Build.PL to find out which version is king.

===
FEATURE
                                               Mar 14, 2011

Too hard to customize:

   Copyright (C) (>>>YEAR<<<) by (>>>USER_NAME<<<)

The copyright holder might be $CORP rather than the user name.

Need another token: COPYRIGHT_HOLDER.
Default to USER_NAME?

===

BUG

If a script begins with a flag like this:

#!perl -T

perlnow sees it and tries to pass it through,
but it doesn't seem to show up in the visible perl run string,
and deleting the line doesn't convince perlnow to
stop running it that way.

Re-setting the runstring seems to work (essentially just resetting
it to what it says it is).  This is pretty funky.

===

TODO

Victor Stevko request:
use y/n questions rather than yes/no.

(( Changing might be mildly difficult...
   I want to make things work differently than emacs policy. ))


===

Sat  July 16, 2016  15:16

Maybe: buffer that shows a menu of options?

   Discoverability, without annoying experts... (ala wordstar).

===

FEATURE

If a C-c / r fails because of a file-not-found,
why not try to re-initialize the run-string and try again before
giving up?
                       
                  Thu  October 19, 2017  15:21  tango

   Maybe: generated runstrings should have the file to be run
   stashed in a hidden place, so that perlnow-run can easily
   do existance checks without scrapping the run-string.

===

FEATURE

Renaming a file should carry through to the runstrings that refer to it.
How?  Maybe, a buffer-local var containing metadata, pointing at runstrings
that reference the file?  Or a .perlnow stash on disk?

===

TODO         2017JAN
FEATURE

Consider: When you save a script, automatically adjust the PATH
envar to find it.  Less important than the (already done)
PERL5LIB adjustments, but an analogus bashrc include could be useful.

There may be emacs vars like exec-path that need to be adjusted also.

===

BUG 2016DEC

There are other circumstances when perlnow tries to run make test,
correct?  (To do that, would first need to run the Build.PL or Makefile.PL.
Does it work?)  Why would you do a make test rather than a prove?

===
                                      March 22, 2017

;; TODO 2017 test select menu:

;;  o  need a rename command (but don't go too crazy replicating dired...)
;;     edit file suffix command?  (follow through: revise runstrings, and internal comments)
;;  o  need a copy command, copy and rename. (follow through: revise internal comments)

;;  o  in a recursive list cursor should be left in the region of the current test-loc. (?)

===

BUG
                                       October 10, 2017  

  After creating a perl test, you get a little bit of code inserted in
  commented out form: it doesn't *really* make sense, the "use" is never
  needed (done already) the sub call isn't in oop form, even if it's for
  an oop module.

  some hints about Test::More-isms wouldn't be out of line...

===
